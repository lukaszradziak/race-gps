import { expect, test, describe } from "vitest";
import { Measure } from "./measure.ts";

describe("measure", () => {
  test("0-60", () => {
    const measure = new Measure();
    measure.addConfig(0, 60);

    measure.addRecord(0.1, 5);
    measure.addRecord(0.26, 10);
    measure.addRecord(0.35, 20);
    measure.addRecord(0.5, 30);
    measure.addRecord(1.5, 40);
    measure.addRecord(10, 50);
    measure.addRecord(59.5, 60);
    measure.addRecord(60.5, 70);

    const speedTime = measure.getLastResult().speedTime;
    expect(speedTime.get(0)).toBe(35);
    expect(speedTime.get(60)).toBe(65);
  });

  test("0-60_2", () => {
    const measure = new Measure();
    measure.addConfig(0, 60);

    measure.addRecord(0.1, 100);
    measure.addRecord(0.26, 110);
    measure.addRecord(0.35, 120);
    measure.addRecord(0.5, 130);
    measure.addRecord(1.5, 140);
    measure.addRecord(1.2, 150);
    measure.addRecord(0.8, 160);
    measure.addRecord(1.2, 170);
    measure.addRecord(10, 180);
    measure.addRecord(59.5, 190);
    measure.addRecord(60.5, 200);

    const speedTime = measure.getLastResult().speedTime;
    expect(speedTime.get(0)).toBe(165);
    expect(speedTime.get(60)).toBe(195);
  });

  test("100-150", () => {
    const measure = new Measure();
    measure.addConfig(100, 150);

    measure.addRecord(99, 40);
    measure.addRecord(101, 50);
    measure.addRecord(149, 60);
    measure.addRecord(151, 70);

    const speedTime = measure.getLastResult().speedTime;
    expect(speedTime.get(100)).toBe(45);
    expect(speedTime.get(150)).toBe(65);
  });

  test("100-150_2", () => {
    const measure = new Measure();
    measure.addConfig(100, 150);

    measure.addRecord(99.1, 100);
    measure.addRecord(100.9, 110);
    measure.addRecord(101, 120);
    measure.addRecord(149, 130);
    measure.addRecord(151, 140);

    const speedTime = measure.getLastResult().speedTime;
    expect(speedTime.get(100)).toBe(105);
    expect(speedTime.get(150)).toBe(135);
  });

  test("100-150_3", () => {
    const measure = new Measure();
    measure.addConfig(100, 150);

    measure.addRecord(99, 100);
    measure.addRecord(101, 110);
    measure.addRecord(99, 120);
    measure.addRecord(101, 130);
    measure.addRecord(100, 140);
    measure.addRecord(99, 150);
    measure.addRecord(100, 160);
    measure.addRecord(125, 170);
    measure.addRecord(150, 180);
    measure.addRecord(151, 190);

    const result = measure.getLastResult();
    expect(result.speedTime.get(100)).toBe(160);
    expect(result.speedTime.get(150)).toBe(180);
  });

  test("100-150_4", () => {
    const measure = new Measure();
    measure.addConfig(100, 150);

    const sampleData = [
      [169686912536, 95.77],
      [169686912537, 96.94],
      [169686912538, 97.61],
      [169686912539, 98.78],
      [169686912540, 99.95],
      [169686912540, 100.62],
      [169686912541, 101.79],
      [169686912542, 102.46],
      [169686912543, 103.13],
      [169686912543, 103.8],
      [169686912544, 104.47],
      [169686912545, 104.75],
      [169686912546, 105.03],
      [169686912547, 105.31],
      [169686912548, 105.99],
      [169686912548, 106.27],
      [169686912549, 106.55],
      [169686912550, 106.83],
      [169686912551, 107.11],
      [169686912551, 107.39],
      [169686912552, 107.67],
      [169686912553, 107.95],
      [169686912554, 108.23],
      [169686912555, 108.51],
      [169686912555, 108.79],
      [169686912556, 109.07],
      [169686912557, 109.35],
      [169686912558, 109.63],
      [169686912559, 109.91],
      [169686912560, 110.2],
      [169686912560, 110.48],
      [169686912562, 110.72],
      [169686912565, 110.97],
      [169686912566, 111.22],
      [169686912567, 111.5],
      [169686912568, 111.78],
      [169686912568, 112.06],
      [169686912570, 112.34],
      [169686912570, 112.63],
      [169686912572, 112.88],
      [169686912573, 113.13],
      [169686912591, 112.9],
      [169686912593, 112.64],
      [169686912594, 112.36],
      [169686912595, 112.07],
      [169686912596, 111.4],
      [169686912597, 110.72],
      [169686912597, 109.55],
      [169686912598, 107.77],
      [169686912599, 106.59],
      [169686912600, 105.42],
      [169686912600, 104.25],
      [169686912601, 103.07],
      [169686912602, 101.9],
      [169686912603, 100.72],
      [169686912604, 100.04],
      [169686912605, 99.37],
      [169686912605, 98.7],
      [169686912606, 98.41],
      [169686912607, 98.13],
      [169686912608, 97.85],
      [169686912608, 97.56],
      [169686912609, 97.28],
      [169686912610, 96.99],
      [169686912612, 96.73],
      [169686912615, 96.48],
      [169686912616, 96.23],
      [169686912616, 95.95],
      [169686912617, 95.66],
      [169686912618, 95.38],
      [169686912619, 95.09],
      [169686912620, 94.41],
      [169686912620, 93.74],
      [169686912621, 93.07],
      [169686912622, 92.39],
      [169686912623, 91.72],
      [169686912624, 91.05],
      [169686912625, 90.76],
      [169686912625, 90.48],
      [169686912626, 90.2],
      [169686912627, 89.91],
      [169686912628, 89.63],
      [169686912628, 89.34],
      [169686912630, 89.06],
      [169686912632, 88.8],
      [169686912658, 89.02],
      [169686912660, 90.87],
      [169686912661, 92.65],
      [169686912661, 94.43],
      [169686912662, 95.6],
      [169686912663, 97.38],
      [169686912664, 99.16],
      [169686912665, 100.94], // 100
      [169686912665, 102.72],
      [169686912666, 104.5],
      [169686912667, 105.67],
      [169686912668, 106.84],
      [169686912669, 108.01],
      [169686912670, 109.19],
      [169686912670, 109.85],
      [169686912671, 111.02], // 110
      [169686912672, 112.19],
      [169686912673, 112.87],
      [169686912673, 114.04],
      [169686912674, 114.7],
      [169686912675, 115.87],
      [169686912676, 116.54],
      [169686912677, 117.21],
      [169686912678, 117.88],
      [169686912678, 118.55],
      [169686912679, 118.83],
      [169686912680, 119.11],
      [169686912681, 119.39],
      [169686912681, 120.06], // 120
      [169686912682, 120.34],
      [169686912683, 120.62],
      [169686912684, 120.9],
      [169686912685, 121.18],
      [169686912685, 121.46],
      [169686912686, 121.74],
      [169686912687, 122.02],
      [169686912688, 122.3],
      [169686912689, 122.59],
      [169686912690, 122.87],
      [169686912690, 123.15],
      [169686912692, 123.4],
      [169686912693, 123.68],
      [169686912695, 123.92],
      [169686912697, 124.18],
      [169686912698, 124.46],
      [169686912698, 124.74],
      [169686912700, 125.02],
      [169686912700, 125.3],
      [169686912701, 125.97],
      [169686912702, 126.25],
      [169686912703, 126.92],
      [169686912703, 127.2],
      [169686912704, 127.87],
      [169686912705, 128.15],
      [169686912706, 128.43],
      [169686912706, 129.11],
      [169686912707, 129.39],
      [169686912708, 129.67],
      [169686912709, 130.33], // 130
      [169686912709, 130.61],
      [169686912710, 130.89],
      [169686912711, 131.57],
      [169686912712, 132.23],
      [169686912713, 132.91],
      [169686912714, 133.19],
      [169686912714, 133.85],
      [169686912715, 134.13],
      [169686912716, 134.81],
      [169686912717, 135.09],
      [169686912718, 135.37],
      [169686912718, 135.65],
      [169686912719, 135.93],
      [169686912720, 136.21],
      [169686912722, 136.46],
      [169686912724, 136.71],
      [169686912725, 136.99],
      [169686912726, 137.27],
      [169686912726, 137.55],
      [169686912727, 137.83],
      [169686912728, 138.11],
      [169686912729, 138.39],
      [169686912730, 139.06],
      [169686912730, 139.73],
      [169686912731, 140.01], // 140
      [169686912732, 140.68],
      [169686912733, 140.96],
      [169686912734, 141.24],
      [169686912735, 141.91],
      [169686912735, 142.19],
      [169686912737, 142.47],
      [169686912737, 143.14],
      [169686912738, 143.42],
      [169686912738, 143.7],
      [169686912740, 144.37],
      [169686912740, 144.66],
      [169686912741, 144.94],
      [169686912742, 145.6],
      [169686912743, 145.88],
      [169686912743, 146.56],
      [169686912745, 146.84],
      [169686912745, 147.5],
      [169686912746, 147.78],
      [169686912746, 148.06],
      [169686912747, 148.34],
      [169686912748, 149.02],
      [169686912749, 149.3],
      [169686912750, 149.58],
      [169686912750, 150.24], // 150
    ];

    for (const row of sampleData) {
      measure.addRecord(row[1], row[0]);
    }

    const result = measure.getLastResult();
    expect(result.speedTime.get(100)).toBe(169686912664.47192);
    expect(result.speedTime.get(110)).toBe(169686912670.1282);
    expect(result.speedTime.get(120)).toBe(169686912681);
    expect(result.speedTime.get(130)).toBe(169686912708.5);
    expect(result.speedTime.get(140)).toBe(169686912730.9643);
    expect(result.speedTime.get(150)).toBe(169686912750);
  });

  test("0-100-full", () => {
    const sampleData = [
      [15443410, 0.04],
      [15443420, 0.07],
      [15443430, 0.06],
      [15443440, 0.07],
      [15443450, 0.04],
      [15443460, 0.02],
      [15443470, 0.04],
      [15443480, 0.04],
      [15443490, 0.07],
      [15443500, 0.11],
      [15443510, 0.07],
      [15443520, 0.02],
      [15443530, 0.02],
      [15443540, 0.04],
      [15443550, 0.02],
      [15443560, 0.04],
      [15443570, 0.09],
      [15443580, 0.09],
      [15443590, 0.24],
      [15443600, 0.78],
      [15443610, 1.87],
      [15443620, 2.82],
      [15443630, 4.17],
      [15443640, 5.59],
      [15443650, 6.98],
      [15443660, 8.8],
      [15443670, 9.98],
      [15443680, 11.46],
      [15443690, 13.58],
      [15443700, 15.04],
      [15443710, 16.61],
      [15443720, 18.02],
      [15443730, 19.91],
      [15443740, 20.59],
      [15443750, 22.59],
      [15443760, 23.59],
      [15443770, 25.21],
      [15443780, 26.52],
      [15443790, 28.24],
      [15443800, 29.56],
      [15443810, 31.21],
      [15443820, 32.71],
      [15443830, 34.19],
      [15443840, 36.11],
      [15443850, 37.34],
      [15443860, 38.89],
      [15443870, 40.8],
      [15443880, 42.08],
      [15443890, 43.67],
      [15443900, 45.26],
      [15443910, 45.52],
      [15443920, 45.49],
      [15443930, 45.65],
      [15443940, 46.17],
      [15443950, 47.54],
      [15443960, 48.89],
      [15443970, 50.32],
      [15443980, 51.0],
      [15443990, 52.21],
      [15444000, 53.69],
      [15444010, 54.5],
      [15444020, 55.52],
      [15444030, 56.89],
      [15444040, 58.63],
      [15444050, 59.63],
      [15444060, 61.26],
      [15444070, 62.76],
      [15444080, 64.19],
      [15444090, 65.47],
      [15444100, 67.06],
      [15444110, 68.25],
      [15444120, 69.54],
      [15444130, 70.82],
      [15444140, 71.69],
      [15444150, 73.41],
      [15444160, 74.06],
      [15444170, 75.32],
      [15444180, 75.8],
      [15444190, 77.95],
      [15444200, 78.56],
      [15444210, 79.47],
      [15444220, 79.51],
      [15444230, 79.73],
      [15444240, 79.58],
      [15444250, 79.99],
      [15444260, 80.78],
      [15444270, 81.19],
      [15444280, 81.99],
      [15444290, 82.56],
      [15444300, 83.17],
      [15444310, 83.8],
      [15444320, 84.43],
      [15444330, 85.43],
      [15444340, 86.01],
      [15444350, 87.23],
      [15444360, 87.91],
      [15444370, 89.06],
      [15444380, 89.95],
      [15444390, 90.84],
      [15444400, 91.64],
      [15444410, 92.79],
      [15444420, 93.79],
      [15444430, 94.67],
      [15444440, 95.54],
      [15444450, 96.6],
      [15444460, 97.4],
      [15444470, 98.16],
      [15444480, 99.19],
      [15444490, 100.08],
      [15444500, 101.01],
      [15444510, 102.08],
      [15444520, 102.88],
      [15444530, 103.25],
      [15444540, 104.47],
    ];

    const measure = new Measure();
    measure.addConfig(0, 100);

    for (const row of sampleData) {
      measure.addRecord(row[1], row[0]);
    }

    expect(measure.getLastResult().measureTime.toFixed(4)).toBe("8.8708");
  });
});
