#include <Arduino.h>
#include <TinyGPSPlus.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <SoftwareSerial.h>
#include "board_config.cpp"

#define SERVICE_UUID "65316b7c-b605-45b4-be6d-b02473b0d29a"
#define CHARACTERISTIC_UUID "c8ad396d-8006-488d-beed-3a55c4b5ccae"

#define GPS_DEBUG 0

const byte gps_setup_10Hz[] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12, 0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};
const byte gps_setup_115200baud[] = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x96, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};
const byte gps_setup_38400baud[] = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xa8};
const byte gps_setup_9600baud[] = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0xcd, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};
const byte gps_setup_GPDTM_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x44, 0x54, 0x4d, 0x2a, 0x33, 0x42, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x0a, 0x00, 0x04, 0x23};
const byte gps_setup_GPGBS_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x42, 0x53, 0x2a, 0x33, 0x30, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x09, 0x00, 0x03, 0x21};
const byte gps_setup_GPGGA_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x47, 0x41, 0x2a, 0x32, 0x37, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x00, 0x00, 0xfa, 0x0f};
const byte gps_setup_GPGLL_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x4c, 0x4c, 0x2a, 0x32, 0x31, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x01, 0x00, 0xfb, 0x11};
const byte gps_setup_GPGRS_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x52, 0x53, 0x2a, 0x32, 0x30, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x06, 0x00, 0x00, 0x1b};
const byte gps_setup_GPGSA_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x53, 0x41, 0x2a, 0x33, 0x33, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x02, 0x00, 0xfc, 0x13};
const byte gps_setup_GPGST_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x53, 0x54, 0x2a, 0x32, 0x36, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x07, 0x00, 0x01, 0x1d};
const byte gps_setup_GPGSV_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x47, 0x53, 0x56, 0x2a, 0x32, 0x34, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x03, 0x00, 0xfd, 0x15};
const byte gps_setup_GPRMC_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x52, 0x4d, 0x43, 0x2a, 0x33, 0x41, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x04, 0x00, 0xfe, 0x17};
const byte gps_setup_GPVTG_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x56, 0x54, 0x47, 0x2a, 0x32, 0x33, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x05, 0x00, 0xff, 0x19};
const byte gps_setup_GPZDA_off[] = {0x24, 0x45, 0x49, 0x47, 0x50, 0x51, 0x2c, 0x5a, 0x44, 0x41, 0x2a, 0x33, 0x39, 0x0d, 0x0a, 0xb5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xf0, 0x08, 0x00, 0x02, 0x1f};
const byte gps_setup_save_settings[] = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF};
const byte gps_setup_reset_to_manufacturer_defaults[] = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x07, 0x1F, 0x9E};
const byte gps_setup_reset[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x87, 0x01, 0x00, 0x95, 0xF7};

BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;

TinyGPSPlus gps;
SoftwareSerial ss(GPS_TX, GPS_RX);
byte data[9];
int lastTime = 0;

class MyServerCallbacks : public BLEServerCallbacks
{
    void onConnect(BLEServer *pServer)
    {
        deviceConnected = true;
    };

    void onDisconnect(BLEServer *pServer)
    {
        deviceConnected = false;
    }
};

void setup()
{
    Serial.begin(115200);
    Serial.println("Hello in Race GPS!");
    Serial.println();

    Serial.println("GPS: setup in progress...");
    ss.begin(GPS_BAUD_DEF);
    delay(500);

    ss.write(gps_setup_GPDTM_off, sizeof(gps_setup_GPDTM_off));
    delay(100);
    ss.write(gps_setup_GPGBS_off, sizeof(gps_setup_GPGBS_off));
    delay(100);
    ss.write(gps_setup_GPGLL_off, sizeof(gps_setup_GPGLL_off));
    delay(100);
    ss.write(gps_setup_GPGRS_off, sizeof(gps_setup_GPGRS_off));
    delay(100);
    ss.write(gps_setup_GPGSA_off, sizeof(gps_setup_GPGSA_off));
    delay(100);
    ss.write(gps_setup_GPGST_off, sizeof(gps_setup_GPGST_off));
    delay(100);
    ss.write(gps_setup_GPGSV_off, sizeof(gps_setup_GPGSV_off));
    delay(100);
    ss.write(gps_setup_GPVTG_off, sizeof(gps_setup_GPVTG_off));
    delay(100);
    ss.write(gps_setup_GPZDA_off, sizeof(gps_setup_GPZDA_off));
    delay(100);
    ss.write(gps_setup_38400baud, sizeof(gps_setup_38400baud));
    delay(100);
    ss.write(gps_setup_10Hz, sizeof(gps_setup_10Hz));
    delay(100);

    Serial.println("GPS: setup is completed");
    ss.end();
    ss.begin(38400);

    BLEDevice::init("ESP32");
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());
    BLEService *pService = pServer->createService(SERVICE_UUID);
    pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ |
            BLECharacteristic::PROPERTY_WRITE |
            BLECharacteristic::PROPERTY_NOTIFY |
            BLECharacteristic::PROPERTY_INDICATE);
    pCharacteristic->addDescriptor(new BLE2902());
    pService->start();

    BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(SERVICE_UUID);
    pAdvertising->setScanResponse(false);
    pAdvertising->setMinPreferred(0x0);
    BLEDevice::startAdvertising();
}

void loop()
{
#if GPS_DEBUG
    while (ss.available() > 0)
    {
        int read = ss.read();
        if (gps.encode(read))
        {
            Serial.printf(
                "\n> satellites: %d, speed: %d, alt: %d, time: %d\n",
                gps.satellites.value(),
                gps.speed.value(),
                gps.altitude.value(),
                gps.time.value());
        }
        else
        {
            Serial.printf("%c", read);
        }
    }
#endif

    if (deviceConnected)
    {
        while (ss.available() > 0)
        {
            if (gps.encode(ss.read()))
            {
                uint32_t time = gps.time.value();
                int satellites = gps.satellites.value();
                int32_t speed = gps.speed.value();
                int32_t alt = gps.altitude.value();

                data[0] = (alt >> 8) & 0xff;
                data[1] = alt & 0xff;
                data[2] = (speed >> 8) & 0xff;
                data[3] = speed & 0xff;
                data[4] = satellites & 0xff;
                data[5] = (time >> 24) & 0xff;
                data[6] = (time >> 16) & 0xff;
                data[7] = (time >> 8) & 0xff;
                data[8] = time & 0xff;

                if (lastTime != time)
                {
                    pCharacteristic->setValue(data, 9);
                    pCharacteristic->notify();
                    lastTime = time;
                }
            }
        }

        delay(1);
    }

    if (!deviceConnected && oldDeviceConnected)
    {
        delay(500);
        pServer->startAdvertising();
        Serial.println("start advertising");
        oldDeviceConnected = deviceConnected;
    }

    if (deviceConnected && !oldDeviceConnected)
    {
        oldDeviceConnected = deviceConnected;
    }
}